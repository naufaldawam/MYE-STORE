// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "project3/group3/domain"

	mock "github.com/stretchr/testify/mock"
)

// CartData is an autogenerated mock type for the ChartData type
type CartData struct {
	mock.Mock
}

// CheckCart provides a mock function with given fields: idProd, idFromToken
func (_m *CartData) CheckCart(idProd int, idFromToken int) (bool, int, int, error) {
	ret := _m.Called(idProd, idFromToken)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(idProd, idFromToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(idProd, idFromToken)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(int, int) int); ok {
		r2 = rf(idProd, idFromToken)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(int, int) error); ok {
		r3 = rf(idProd, idFromToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// DeleteDataDB provides a mock function with given fields: idProd, idFromToken
func (_m *CartData) DeleteDataDB(idProd int, idFromToken int) (int, error) {
	ret := _m.Called(idProd, idFromToken)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(idProd, idFromToken)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idProd, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: data
func (_m *CartData) InsertData(data domain.Cart) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Cart) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Cart) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectData provides a mock function with given fields: limit, offset, idFromToken
func (_m *CartData) SelectData(limit int, offset int, idFromToken int) ([]domain.Cart, error) {
	ret := _m.Called(limit, offset, idFromToken)

	var r0 []domain.Cart
	if rf, ok := ret.Get(0).(func(int, int, int) []domain.Cart); ok {
		r0 = rf(limit, offset, idFromToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(limit, offset, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataDB provides a mock function with given fields: stock, idCart, idFromToken
func (_m *CartData) UpdateDataDB(stock int, idCart int, idFromToken int) (int, error) {
	ret := _m.Called(stock, idCart, idFromToken)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, int) int); ok {
		r0 = rf(stock, idCart, idFromToken)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(stock, idCart, idFromToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartData creates a new instance of CartData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartData(t mockConstructorTestingTNewCartData) *CartData {
	mock := &CartData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
